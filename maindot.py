from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext


import logging
import Marcop
import Connect_DataBase
from datetime import datetime
import Sates

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler("Error.log"),
                              logging.StreamHandler()])
bot = Bot(token=open("Canfic.txt",mode="r").read())
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def welcome(msg: types.Message):
    await msg.answer('Hi', reply_markup=Marcop.Marcop_main())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.username} \n"
                 f"–Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text}")

@dp.message_handler(content_types=["text"])
async def main_menu(msg: types.Message, state: FSMContext):
    if msg.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—áüìã":
        All_Tasks = Connect_DataBase.all_Tasks()
        if All_Tasks:
            Today = datetime.now().date().strftime('%d/%m/%Y')
            result = [task for task in All_Tasks if Today == task[1]]
            await msg.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",reply_markup=Marcop.marcop_task_list_today(result))
        else:
            await msg.answer("–ó–∞–¥–∞—á –Ω–µ—Ç")
    elif msg.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—Éüìù":
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        await state.set_state(Sates.Forma.title)
    elif msg.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É‚ùå":
        await msg.answer("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µü§∑üèª‚Äç‚ôÄÔ∏è........")
    #2)–æ—Ç—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Ä–µ–º—è", –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω–ª–∞–π—Ç –∫–Ω–æ–ø–∫–∞–º–∏
    else:
        await msg.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: <span class='tg-spoiler'><ins><i>{msg.text}</i></ins></span>", parse_mode='HTML')

@dp.message_handler(content_types=types.ContentType.ANY,state=Sates.Forma.title)
async def task_title(msg:types.Message, state: FSMContext):
    if msg.content_type == types.ContentType.TEXT:
        await state.update_data(title=msg.text)
        await msg.answer("–ó–∞–ø–∏—Å–∞–ª")
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å–µ –¥–∞—Ç—É '–¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥'")
        await state.set_state(Sates.Forma.date)
    else:
        await msg.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {msg.content_type}\n"
                         f"—è –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")

@dp.message_handler(content_types=types.ContentType.ANY,state=Sates.Forma.date)
async def task_title(msg:types.Message, state: FSMContext):
    if msg.content_type == types.ContentType.TEXT:
        if msg.text.find("/"):
            await state.update_data(date=msg.text)
            await msg.answer("–ó–∞–ø–∏—Å–∞–ª")
            await msg.answer("–û—Ç–ø—Ä–∞–≤—å–µ –≤—Ä–µ–º—è '00:00' –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24 —á–∞—Å–∞")
            await state.set_state(Sates.Forma.time)
        else:
            await msg.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∞—Ç—É –Ω–µ –ø–æ —Ñ–æ—Ä–º–µ")
    else:
        await msg.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {msg.content_type}\n"
                         f"—è –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")

@dp.message_handler(content_types=types.ContentType.ANY,state=Sates.Forma.time)
async def task_title(msg:types.Message, state: FSMContext):
    if msg.content_type == types.ContentType.TEXT:
        if msg.text.find(":"):
            await state.update_data(time=msg.text)
            await msg.answer("–ó–∞–ø–∏—Å–∞–ª")
            data=await state.get_data()
            await msg.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:\n"
                             f"<b> –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ </b>: {data['title']}\n"
                             f"<b> –¥–∞—Ç–∞ </b>: {data['date']}\n"
                             f"<b> –≤—Ä–µ–º—è </b>: {data['time']}", parse_mode='HTML',
                             reply_markup=Marcop.confirmation())


        else:
            await msg.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∞—Ç—É –Ω–µ –ø–æ —Ñ–æ—Ä–º–µ")
    else:
        await msg.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {msg.content_type}\n"
                         f"—è –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")

@dp.callback_query_handler(state=Sates.Forma.time)
async def callback_add_task(call:types.callback_query,state:FSMContext):
    if call.data == "Yes":
        await call.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª!", reply_markup=None)
        await state.finish()
    elif call.data == "No":
        await call.message.delete()
        await state.finish()



if __name__=="__main__":
    executor.start_polling(dp, skip_updates=True)